---
title: "Virtual Environment, Packages, Import/Export"
author: "Enrico Toffalini"
include-in-header: ../assets/slidesheader.html
format:
  revealjs:
    code-line-numbers: false
    css: custom.css
    theme: default
    slide-number: c/t
    self-contained: false
    title-slide-attributes: 
     data-background-image: "figures/psicostatLogo.png"
     data-background-size: "contain"
     data-background-opacity: "0.15"
execute:
  echo: true
  output: true
---

```{r, echo=F, include=F}
reticulate::use_python("C:/Users/enric/AppData/Local/Programs/Python/Python313/python.exe")
reticulate::repl_python()
```

## Virtual Environment

<div style="font-size:38px;">
A "virtual environment" (*`venv`*) is practically a local folder with **an isolated Python environment**. It contains a copy of the **Python interpreter** and **all the packages you install** at the **exact versions** used at that time. This folder can ideally be placed inside your project directory

Virtual environments are routinely used in "serious" / professional projects, so we will not use them systematically in this course. However, they are considered best practice for **avoiding version conflicts** and **ensuring reproducibility**. (BTW, something similar now exists also in R via the *`renv`* package, although unfortunately not widely used)
</div>

<!------------------------------------------------------------------>

## Virtual Environment

Create a virtual environment with this command in your bash/terminal:

```{bash, eval=F}
python -m venv nameOfMyEnv
```

then activate it before using

```{bash, eval=F}
source nameOfMyEnv/bin/activate     # Linux/macOS

nameOfMyEnv\Scripts\activate.bat    # Windows
# or alternatively
nameOfMyEnv\Scripts\activate.ps1    # Windows
```

...alternatively, inside IDEs, you may activate the `venv` via specific commands like `reticulate::use_virtualenv("nameOfMyEnv", required=T)` (in ***RStudio***), or setting the Python interpreter manually and then restarting the kernel (in ***Spyder***)

<!------------------------------------------------------------------>

## Installing and importing packages

Installing, in an IDE console or Colab: 
```{python, eval=F}
!pip install pandas numpy seaborn
```

Then, before using any of their functions, import the packages:
```{python, eval=F}
import pandas as pd
import numpy as np
import seaborn as sns
```

`as` gives a shorter alias to a package name (e.g., `pd` for `pandas`, `np` for `numpy`); this is important because in Python functions must *always* be called by specifying the package name (unlike in R)

<!------------------------------------------------------------------>

## Using functions, help, autocomplete

Call a function from a package and getting help:
```{python, eval=F}
np.mean([2.0, 1.5, 7.1, 4.2]) # call a function from a package
?np.mean      # help only in IDE console or Colab,         
help(np.mean) # help via built-in function
```

Use `tab` to autocomplete and explore available functions of a package ‚Ü¥

<div style="text-align: center;">
  <img src="figures/tabFunction.png" style="width: 100%;" />
</div>

<!------------------------------------------------------------------>

## Using functions, help, autocomplete

As in R, you can rely on positional order of arguments instead of naming them, or you can completely omit them if there are valid default arguments. However, it‚Äôs best practice to make all relevant arguments explicit for readability and reproducibility

<div class="large-code">
```{python, eval=F}
sns.regplot(data=myDF, x="Age", y="Score", scatter=True, ci=95)
plt.show()
```
</div>
<div style="text-align:center; max-width:70%;">
```{python, echo=F}
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

plt.clf()
N = 100
Age = np.random.uniform(65,85,N)
Score = np.random.normal(100-Age/1.5,10,N)
df = pd.DataFrame({"Age":Age, "Score":Score})
pl = sns.regplot(data=df, x="Age", y="Score", 
                          scatter=True, ci=95)
pl.collections[0].set_alpha(0.8)
pl.collections[1].set_alpha(0.25)

plt.show()
```
</div>

<!------------------------------------------------------------------>

## Accessing functions as methods

In Python, many objects have functions *attached* to them ‚Äî these are called **methods**, and are accessed using dot (`.`) notation *(more on this later!)*

```{python}
import numpy as np
myVect = np.array([2.0, 1.5, 7.1, 4.2])
```

::: columns
::: {.column width="50%"}
***Method-style syntax***, requires that the object has this method:
```{python}
myVect.mean()
```
:::
::: {.column width="50%"}
***Function-style syntax*** <br/> (more like R):
```{python}
np.mean(myVect)
```
:::
:::

::: columns
::: {.column width="30%"}
<div style="text-align:right;">
Use `tab` to autocomplete and explore available methods of an object ‚Üí 
</div>
:::
::: {.column width="70%"}
<div style="text-align: center;">
  <img src="figures/tabMethod.png" style="width: 100%;" />
</div>
:::
:::


<!------------------------------------------------------------------>

## 
### Working directory

<div style="font-size:24px;">
Equivalent to R's `getwd()` / `setwd()`:
```{python, eval=F}
import os

os.getcwd()               # Get current working directory
os.chdir("path/to/folder") # Change working directory
```
In **Colab**, paths are relative to the notebook location in Google Drive
</div>

### Import/Export objects <span style="font-size:32px;">*(no equivalent of `save.image()` of R)*</span>
```{python, eval=F}
import pickle

# Save an object 
with open("myObject.pkl", "wb") as file:       # "wb" is for "writing"
    pickle.dump(myObject, file)
    
# Load that object later
with open("myObject.pkl", "rb") as file:       # "rb" is for "reading"
    myObject = pickle.load(file)
```

<!------------------------------------------------------------------>

## 
### Import tabular data (more on `pandas` later!)

from CSV
```{python, eval=F}
import pandas as pd

df = pd.read_csv("data/Courses40Cycle.csv")
```

from Excel
```{python, eval=F}
df = pd.read_excel("data/Courses40Cycle.xlsx")
```

from `Ctrl+C` copied elements (beautiful ‚ù§Ô∏è but only for Windows)
```{python, eval=F}
df = pd.read_clipboard()
```

<br/> 

### Export tabular data 

```{python, eval=F}
df.to_csv("exported_data.csv", index=False) # index=False excludes row numbers

df.to_excel("exported_data.xlsx", index=False)
```

<!------------------------------------------------------------------>

## 
### Export figures
```{python, eval=F}
import matplotlib.pyplot as plt

plt.scatter(np.random.normal(0,1,10), np.random.normal(0,1,10))
plt.title("Example Plot")

plt.savefig("myPlot.png", dpi=300)  # export as PNG
plt.savefig("myPlot.pdf")           # export as PDF
```

<br/>

### Delete an object <span style="font-size:32px;">*(similar to `rm(df)` in R)*</span>
```{python, eval=F}
del df
```

<br/>

### Listing all objects in workspace <span style="font-size:32px;">*(similar to `ls()` in R)*</span>
```{python}
dir()
```

<!------------------------------------------------------------------>

## `dir()`

**`dir()`** is a built-in function that does more than just returning a list of objects in workspace; it allows you to inspect all ***attributes*** and ***methods*** of any object

```{python}
a = [5.2, 2, 0, 98, 11.5, 63.11]
dir(a)[37:47]

import numpy as np
dir(np)[40:70]

a = np.array([5.2, 2, 0, 98, 11.5, 63.11])
dir(a)[130:160]
```


<!------------------------------------------------------------------>

## Project like a pro üòé

- Use a **virtual environment** per project (as a subfolder);
- Place scripts, notebooks, and data in different subfolders;
- Use **relative paths** (e.g., `"data/myfile.csv"`);
- Save results and figures via code (not manually)

```csharp
myProjectFolder/
‚îú‚îÄ‚îÄ venv/             ‚Üê virtual environment
‚îú‚îÄ‚îÄ data/             ‚Üê .csv, .xlsx, etc.
‚îú‚îÄ‚îÄ scripts/          ‚Üê .py scripts
‚îú‚îÄ‚îÄ results/          ‚Üê output files, figures
‚îú‚îÄ‚îÄ notebooks/        ‚Üê markdowns, colab notebooks, etc.
‚îú‚îÄ‚îÄ requirements.txt  ‚Üê list of installed packages for reproducibility
‚îî‚îÄ‚îÄ README.md         ‚Üê brief description of the project
```

<!------------------------------------------------------------------>
