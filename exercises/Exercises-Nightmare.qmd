---
title: "Exercises - Dataframes, *The nightmare*... in Python"
subtitle: "*Basics of Python for Data Science*"
include-in-header: assets/header.html
format: 
  html:
    self-contained: true
    toc-depth: 4  
    toc-expand: 4
    code-fold: false 
    message: false
    css: "assets/custom.css"
editor: visual
---

## Like a ~~data scientist~~ data cleaner

This is the üêç version of the exercise that you (as students of the PhD program in Psychological Sciences) previously encountered for the course on <a href="https://enricotoffalini.github.io/Basics-R/" target="_blank">Basics of R for Data Science</a>
# Exercises - DataFrames: The Nightmare in Python

## Scenario

You have received messy datasets from students or colleagues who have been collecting data from different tests: INVALSI, Wechsler, an experimental attention task, and personality questionnaires. Before you can do any meaningful analysis, you need to **clean**, **merge**, and **analyze** the data.

### Datasets:
- `ExerData_Invalsi_1.csv`, `ExerData_Invalsi_2.csv`: participant responses to INVALSI tasks (need to be merged).
- `ExerData_Wechsler.xlsx`: scores on 10 Wechsler subtests.
- `ExerData_LabTrials.csv`: reaction time data in long format from an attentional task.
- `ExerData_Questionnaires.csv`: Openness and Agreeableness scores.

---

## Tasks

1. **Data Cleaning**
   - Merge `INVALSI_1` and `INVALSI_2`.
   - Clean any variables where numbers are stored as strings or contain inconsistencies (e.g., missing or malformed values).
   - Standardize participant IDs across datasets if necessary.

2. **Data Wrangling**
   - Merge all datasets by participant ID using `pd.merge()`.
   - Aggregate the long-format experimental data into participant-level means using `groupby()` and `pivot()` or `agg()`.

3. **Variable Creation**
   - Compute total/mean scores for:
     - INVALSI
     - Wechsler
     - Experimental task
     - Openness and Agreeableness

4. **Descriptive Statistics**
   - Compute `mean`, `std`, `median`, `skew`, and `kurtosis` for all total scores.
     - Use `scipy.stats.skew()` and `kurtosis()`.

5. **Inferential Analysis**
   - Compare males and females on each score using independent samples t-tests: `scipy.stats.ttest_ind()`.

6. **Data Visualization**
   - Boxplots and histograms for distributions (`seaborn.boxplot()`, `sns.histplot()`).
   - Scatterplots between total scores (`sns.scatterplot()` or `plt.scatter()`).

---

## Hints for Students

- Use `pd.to_numeric()` with `errors='coerce'` to handle problematic numeric conversions.
- Use `df.replace()` or `str.replace()` for cleaning characters in strings.
- Use `pd.concat()` for stacking datasets (rbind), and `pd.merge()` for joining (merge).
- For long ‚Üí wide format: use `df.pivot()` or `df.pivot_table()`.

---

## Final Goal

Produce a clean dataframe with one row per participant and:
- All total/aggregate scores,
- A correlation matrix between the main variables,
- Descriptive stats table,
- T-test comparisons (male vs female),
- Visualizations for distributions and bivariate relationships.

---

Would you like me to create the full Colab Python notebook for this adapted version, using the uploaded datasets?


